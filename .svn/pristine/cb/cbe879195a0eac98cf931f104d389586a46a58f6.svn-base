<?php
namespace Common\Model;
use Think\Log;
class TaskModel extends CommonModel{
    //声明属性
    private $_log;//日志对象
    private $_account_model;
    private $_task_type;
    /*日志常量*/
    const INFO = 'INFO';  // 流水日志
    const ERR = 'ERR';  // 一般错误
    const LOG_FILE = 3;

    public function __construct()
    {
        parent::__construct();
        $this->_log = new Log();//声明日志对象
        $this->_account_model = D('Account');

        $this->_task_type = C('task_type');
    }
	protected function _before_write(&$data) {
		parent::_before_write($data);
	}

    /**
     * 函数用途描述:创建任务
     * @author:risoli
     * @param $data
     * @param $task_id
     * @param $msg
     * @return bool|int
     */
    public function create_task($data,$process, &$task_id, &$msg){
        if( count($data) < 1 ){
            $msg = set_err_msg('缺少任务必须参数。',101);
            return 101;
        }
        if(count($process) < 1){
            $msg = set_err_msg('缺少流程必须参数。',101);
            return 101;
        }
        $this->startTrans();
        //获取流程数组
        $i = 0;
        $stage = C('stage');
        $process_data = array();
        $openids = array();
        foreach ($process as $key => $value){
            $process_data[$i] = array(
                'p_stage_id' => $key,
                'p_stage_name' => $stage[$key],
                'a_type' => $value['a_type'],
                'a_id' => $value['a_id'],
                'a_name' => $value['a_name']
            );
            //如果是开始阶段，则默认创建任务时间为流程开始时间
            //在创建任务时，第一阶段的执行人信息需要加入任务信息中
            if($i == 0){
                $process_data[$i]['p_start_time'] = time();
                $data['t_stage_id'] = $key;
                $data['a_id'] = $value['a_id'];
                $data['a_name'] = $value['a_name'];
            }else{
                $process_data[$i]['p_start_time'] = 0;
            }
            //获取账户openid，以便创建后，发送通知
            $account_info = array();
            $ret = $this->_account_model->get_account_info_by_id($value['a_id'],$account_info,$msg);
            if($ret !== true){
                $msg = set_err_msg('获取账户openid失败。',$ret);
                $this->_log->write_array($value,$msg, self::ERR, __CLASS__.'\\'.__FUNCTION__.'\\'.__LINE__,self::LOG_FILE);
            }
            $openids[] = $account_info['a_wechat_open_id'];
            //判断账户是否被激活
            if((int)$account_info['status'] !== 1 ){
                return 10202;
                break;
            }

            $i++;
        }

        //step1 创建任务
        $ret = $this->add($data);
        if($ret === false){
        $this->rollback();
        $msg = set_err_msg('创建任务信息失败。',104);
        $this->_log->write_array($this->getLastSql(),$msg, self::ERR, __CLASS__.'\\'.__FUNCTION__.'\\'.__LINE__,self::LOG_FILE);
        return 104;
        }
        $task_id = $ret;
        foreach ($process_data as $key => $value){
            $process_data[$key]['t_id'] = $task_id;
        }
        //step2 创建流程
        ksort($process);
        $process_model = D('Process');
        $ret = $process_model->create_all_process($process_data,$msg);
        if($ret !== true){
            $this->rollback();
            return $ret;
        }
        //step3 获取创建的第一个流程id并更新到任务表中
        $process_condition = array(
            't_id' => $task_id
        );
        $process_list = array();
        $ret = $process_model->get_p_list_by_condition($process_condition,$process_list,$msg);
        if($ret !== true){
            $this->rollback();
            return $ret;
        }
        $first_process_id = $process_list[0]['p_id'];
        $task_condition = array(
            't_id' => $task_id
        );
        $task_update = array(
            'p_id' => $first_process_id
        );
        $ret = $this->update_task($task_condition,$task_update,$msg);
        if($ret !== true){
            $this->rollback();
            return $ret;
        }
        //step4向任务执行人发送微信通知
        foreach ($openids as $openid){
            $url = C('DOMAIN').'index.php?s=/Index/index/enter/account';
            $ret = send_wechat_msg_template(2,$openid,'您有新的任务',$data['t_title'],$url,$this->_task_type[$data['t_type']]);
            if($ret['errcode'] !== 0){
                $msg = '账户为：'.$data['a_name '].',微信消息推送失败。';
                $this->_log->write_array($ret,$msg, self::ERR, __CLASS__.'\\'.__FUNCTION__.'\\'.__LINE__,self::LOG_FILE);
                continue;
            }
        }
        $this->commit();
        return true;
    }

    /**
     * 函数用途描述:根据条件，统计任务数量
     * @author:risoli
     * @param $condition
     * @param $count
     * @param $msg
     * @return bool|int
     */
    public function count_task($condition, &$count, &$msg){
        $count = $this->where($condition)->count();
        if($count === false){
            $msg = set_err_msg('统计任务数量失败。',104);
            $this->_log->write_array($this->getLastSql(),$msg, self::ERR, __CLASS__.'\\'.__FUNCTION__.'\\'.__LINE__,self::LOG_FILE);
            return 104;
        }
        return true;
    }

    /**
     * 函数用途描述:根据账户类型统计任务数
     * @author:risoli
     * @param $account_type
     * @param $count
     * @param $msg
     * @return bool|int
     */
    public function count_task_by_account_type($account_type,$time_area,&$count,&$msg){
        if( empty($account_type) ){
            $msg = set_err_msg('缺少账户类型。',101);
            return 101;
        }
        $condition['t.t_create_time'] = $time_area;
        $count = $this->alias('t')
            ->join("xxgc_account a on t.a_id=a.a_id and a.a_type=$account_type")
            ->where($condition)
            ->count("t.t_id");
        if($count === false){
            $msg = set_err_msg('统计账户类型下的任务数量失败。',104);
            $this->_log->write_array($this->getLastSql(),$msg, self::ERR, __CLASS__.'\\'.__FUNCTION__.'\\'.__LINE__,self::LOG_FILE);
            return 104;
        }
        return true;
    }

    /**
     * 函数用途描述:根据条件获取分页列表
     * @author:risoli
     * @param null $condition
     * @param string $field
     * @param null $order
     * @param null $offset
     * @param $num
     * @param $task_list
     * @param $msg
     * @return bool|int
     */
    public function get_task_list($condition = null, $field = '*', $order=null, $offset = null, $num, &$task_list, &$msg){
        if( count($condition) < 1 ){
            $msg = set_err_msg('缺少必须参数。',101);
            return 101;
        }
        $task_list = $this->where($condition)->limit($offset, $num)->order($order)->field($field)->select();
        if($task_list === false){
            $msg = set_err_msg('查找订单list失败。',104);
            $this->_log->write_array($this->getLastSql(),$msg, self::ERR, __CLASS__.'\\'.__FUNCTION__.'\\'.__LINE__,self::LOG_FILE);
            return 104;
        }
        return true;
    }

    /**
     * 函数用途描述:通过任务id，获取任务详情
     * @author:risoli
     * @param $task_id
     * @param $task_info
     * @param $msg
     * @return bool|int
     */
    public function get_task_info_by_id($task_id,&$task_info,&$msg){
        if(empty($task_id)){
            $msg = set_err_msg('缺少任务id。',101);
            return 101;
        }
        $condition = array(
            't_id' => $task_id
        );
        $task_info = $this->where($condition)->find();
        if($task_info === false){
            $msg = set_err_msg('查找订单详情失败。',104);
            $this->_log->write_array($this->getLastSql(),$msg, self::ERR, __CLASS__.'\\'.__FUNCTION__.'\\'.__LINE__,self::LOG_FILE);
            return 104;
        }
        return true;
    }

    /**
     * 函数用途描述:更新任务信息
     * @author:risoli
     * @param $condition
     * @param $data
     * @param $msg
     * @return bool|int
     */
    public function update_task($condition,$data,&$msg){
        if(count($condition) < 1){
            $msg = set_err_msg('缺少更新条件。',101);
            return 101;
        }
        if(count($data) < 1){
            $msg = set_err_msg('缺少更新数据。',101);
            return 101;
        }
        $ret = $this->where($condition)->save($data);
        if($ret === false){
            $msg = set_err_msg('更新任务信息失败。',104);
            $this->_log->write_array($this->getLastSql(),$msg, self::ERR, __CLASS__.'\\'.__FUNCTION__.'\\'.__LINE__,self::LOG_FILE);
            return 104;
        }
        return true;
    }

    /**
     * 函数用途描述:显示任务列表，并调用系统show方法
     * @author:risoli
     * @param null $condition
     * @param string $field
     * @param $page
     * @param null $order
     * @param $msg
     */
    public function get_task_list_show($condition = null, $field = '*', $page, $order = null, &$result, &$msg){
        $result = $this->field($field)->where($condition)->limit($page->firstRow.','.$page->listRows)->order($order)->select();
        if($result === false){
            $msg = set_err_msg('查找任务list失败。',104);
            $this->_log->write_array($this->getLastSql(),$msg, self::ERR, __CLASS__.'\\'.__FUNCTION__.'\\'.__LINE__,self::LOG_FILE);
            return 104;
        }
        return true;
    }



}